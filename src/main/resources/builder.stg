listRootClass(package, model) ::= <<
package $package$;

import java.util.*;
import org.json.simple.*;

public class $model.className$ {
	
	private List<Object> jsonArray;

	@SuppressWarnings("unchecked")	
	public $model.className$() {
		jsonArray = new JSONArray();
		$defaultListItems(model)$
	}
	
	public void add(Object obj) {
		jsonArray.add(obj);
	}
	
	public String asJson() {
		return jsonArray.toString();
	}
	
	$nestedInnerClasses(model)$
}
>>


objectRootClass(package, model) ::= <<
package $package$;

import java.util.*;
import org.json.simple.*;

public class $model.className$ {
	
	private Map<String, Object> jsonObject;

	@SuppressWarnings("unchecked")	
	public $model.className$() {
		jsonObject = new JSONObject();
		$defaultValues(model)$
	}
	
	$withMethods(model)$
	
	public String asJson() {
		return jsonObject.toString();
	}
	
	$nestedInnerClasses(model)$
}
>>



innerClass(model) ::= <<
public static class $model.className$ {

	private Map<String, Object> jsonObject;

	@SuppressWarnings("unchecked")	
	public $model.className$() {
		jsonObject = new JSONObject();
		$defaultValues(model)$
	}

	$withMethods(model)$
	
	public Map<String, Object> asJsonObject() {
		return jsonObject;
	}

	$nestedInnerClasses(model)$
\}
>>


nestedInnerClasses(model) ::= <<
$if(model.hasObjectProperties)$
$model.objectProperties:{ objectProp | 
$innerClass(objectProp.model)$
}$
$endif$
>>



withMethods(model) ::= <<
$model.properties:{ property |
$if(property.array)$
@SuppressWarnings("unchecked")
public $model.className$ with$property.nameFirstLetterUppercase$($property.javaClassName$... $property.name$) {
$else$
public $model.className$ with$property.nameFirstLetterUppercase$($property.javaClassName$ $property.name$) {
$endif$
	$if(property.object)$
	jsonObject.put("$property.name$", $property.name$.asJsonObject());
	$elseif(property.array)$
	JSONArray jsonArray = (JSONArray) jsonObject.get("$property.name$");
	for ($property.javaClassName$ item: $property.name$) {
		jsonArray.add(item.asJsonObject());
	\}
	$else$
	jsonObject.put("$property.name$", $property.name$);
	$endif$
	return this;
\}

}$
>>



defaultValues(model) ::= <<
$model.properties:{ property |
$if(property.array)$
jsonObject.put("$property.name$", Arrays.asList(new $property.javaClassName$().asJsonObject()));
$elseif(property.object)$
jsonObject.put("$property.name$", new $property.javaClassName$().asJsonObject());
$else$
jsonObject.put("$property.name$", $property.defaultValueEscaped$);
$endif$
}$
>>


defaultListItems(model) ::= <<
$model.properties:{ item |
$if(item.array)$
jsonArray.add(new $item.javaClassName$().asJsonObject());
$elseif(item.object)$
jsonArray.add(new $item.javaClassName$().asJsonObject());
$else$
jsonArray.add($item.defaultValueEscaped$);
$endif$
}$
>>