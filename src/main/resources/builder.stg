listRootClass(package, model) ::= <<
package $package$;

$imports()$

public class $model.name.singularBuilderClassName$ {
	
	private List<Object> jsonArray;

	public $model.name.singularBuilderClassName$() {
		jsonArray = parse("$model.jsonSourceStringEscaped$");
	}
	
	$staticFactoryMethod(model)$
	
	$parseMethod()$
	
	public void add(Object obj) {
		jsonArray.add(obj);
	}
	
	public String asJson() {
		return jsonArray.toString();
	}
	
	$nestedInnerClasses(model)$
}
>>


objectRootClass(package, model) ::= <<
package $package$;

$imports()$

public class $model.name.singularBuilderClassName$ {
	
	private Map<String, Object> jsonObject;

	public $model.name.singularBuilderClassName$() {
		jsonObject = parse("$model.jsonSourceStringEscaped$");
	}
	
	$staticFactoryMethod(model)$
	
	$parseMethod()$
	
	$withMethods(model)$
	
	public String asJson() {
		return jsonObject.toString();
	}
	
	$nestedInnerClasses(model)$
}
>>


imports() ::= <<
import java.util.*;
import org.json.simple.*;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
>>


innerClass(model) ::= <<
public static class $model.name.singularBuilderClassName$ {

	private Map<String, Object> jsonObject;

	public $model.name.singularBuilderClassName$() {
		jsonObject = parse("$model.jsonSourceStringEscaped$");
	}
	
	$staticFactoryMethod(model)$

	$withMethods(model)$
	
	public Map<String, Object> asJsonObject() {
		return jsonObject;
	}

	$nestedInnerClasses(model)$
\}
>>


nestedInnerClasses(model) ::= <<
$if(model.hasObjectProperties)$
$model.objectProperties:{ objectProp | 
$innerClass(objectProp.model)$
}$
$endif$
>>



withMethods(model) ::= <<
$model.properties:{ property |
$if(property.array)$
@SuppressWarnings("unchecked")
public $model.name.singularBuilderClassName$ with$property.name.upperCaseFirstLetterForm$($property.name.singularBuilderClassName$... $property.name$) {
$else$
public $model.name.singularBuilderClassName$ with$property.name.upperCaseFirstLetterForm$($property.javaClassName$ $property.name$) {
$endif$
	$if(property.object)$
	jsonObject.put("$property.name$", $property.name$.asJsonObject());
	$elseif(property.array)$
	JSONArray jsonArray = (JSONArray) jsonObject.get("$property.name$");
	jsonArray.clear();
	for ($property.name.singularBuilderClassName$ item: $property.name$) {
		jsonArray.add(item.asJsonObject());
	\}
	$else$
	jsonObject.put("$property.name$", $property.name$);
	$endif$
	return this;
\}

}$
>>


parseMethod() ::= <<
@SuppressWarnings("unchecked")
private static <T> T parse(String json) {
	try {
		return (T) new JSONParser().parse(json);
	\} catch (ParseException e) {
		throw new IllegalArgumentException(e);
	\}
\}
>>



staticFactoryMethod(model) ::= <<
public static $model.name.singularBuilderClassName$ $model.name.indefiniteArticleForm$() {
	return new $model.name.singularBuilderClassName$();
\}
>>